// Generated by CoffeeScript 1.6.3
(function() {
  var alreadyAdded, appendFacebook, d, facebook, getSpotify, getYoutube, observeDOM, _mp;

  d = {
    log: function(string) {
      if (true) {
        return console.log(string);
      }
    },
    dir: function(obj) {
      if (true) {
        return console.dir(string);
      }
    }
  };

  observeDOM = (function() {
    var MutationObserver, eventListenerSupported;
    MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
    eventListenerSupported = window.addEventListener;
    return function(obj, callback) {
      var obs;
      if (MutationObserver) {
        obs = new MutationObserver(function(mutations, observer) {
          if (mutations[0].addedNodes.length || mutations[0].removedNodes.length) {
            return callback();
          }
        });
        return obs.observe(obj, {
          childList: true,
          subtree: true
        });
      } else if (eventListenerSupported) {
        obj.addEventListener('DOMNodeInserted', callback, false);
        return obj.addEventListener('DOMNodeRemoved', callback, false);
      }
    };
  })();

  facebook = document.location.origin.match('www.facebook');

  if (facebook && facebook.length > 0) {
    observeDOM(document.getElementsByClassName('UIStream')[0], function() {
      return appendFacebook();
    });
  }

  appendFacebook = function() {
    var action, element, end, i, link, node, nodes, start, _i;
    this.counter || (this.counter = 0);
    nodes = document.getElementsByClassName('mainWrapper');
    start = 0 + this.counter;
    end = nodes.length - 1;
    for (i = _i = start; start <= end ? _i <= end : _i >= end; i = start <= end ? ++_i : --_i) {
      node = nodes[i];
      element = getSpotify(node) || getYoutube(node);
      if (!alreadyAdded(node) && element) {
        action = node.getElementsByClassName('UIActionLinks')[0];
        action.insertAdjacentHTML('beforeend', '<a class="mocketLink" data-searchstring="' + escape(element) + '">Mocket It!</a> Â·');
        link = node.getElementsByClassName('mocketLink')[0];
        _mp.on('click', link, function(evt) {
          var after_click, e, search;
          evt.preventDefault();
          after_click = 'Mocketed!';
          e = evt.toElement;
          if (e.innerText === after_click) {
            return;
          }
          search = e.getAttribute('data-searchstring');
          e.innerText = after_click;
          return chrome.extension.sendMessage({
            method: "postSong",
            data: {
              search: search
            }
          });
        });
      }
    }
    if (end > 0) {
      this.counter = end;
    }
  };

  alreadyAdded = function(obj) {
    var v;
    v = obj.innerHTML.match('Mocket It');
    return v && v.length > 0;
  };

  getSpotify = function(obj) {
    var v;
    if (obj instanceof Node) {
      v = obj.getElementsByClassName('featured_song')[0];
      if (v) {
        return v.innerText;
      }
    }
    return null;
  };

  getYoutube = function(obj) {
    var e, match, regexp, string;
    regexp = /youtube\.\S*/ig;
    string = '';
    if (obj instanceof Node) {
      string = obj.innerText;
    }
    match = string.match(regexp);
    if (match && match.length > 0) {
      e = obj.getElementsByClassName('uiAttachmentTitle')[0];
      if (e) {
        return e.innerText;
      }
    }
    return null;
  };

  _mp = _mp || {};

  _mp.on = function(evnt, elem, func) {
    var bind;
    bind = function(e) {
      if (e.addEventListener) {
        return e.addEventListener(evnt, func, false);
      } else {
        if (e.attachEvent) {
          return e.attachEvent("on" + evnt, func);
        } else {
          return e[evnt] = func;
        }
      }
    };
    return bind(elem);
  };

}).call(this);
