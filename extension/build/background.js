// Generated by CoffeeScript 1.6.3
(function() {
  var host, injectScript, pushToSongsHistory, rapi, start;

  host = 'http://mocket.in';

  console.log("Extension loaded.");

  start = function() {
    if (!localStorage.getItem('songsHistory')) {
      return localStorage.setItem('songsHistory', JSON.stringify({
        elements: []
      }));
    }
  };

  chrome.runtime.onInstalled.addListener(function(details) {
    if (details.reason === "install") {
      return chrome.tabs.create({
        url: "options.html"
      });
    } else if (details.reason === "update") {
      return console.log("Updated from " + details.previousVersion + " to " + details.thisVersion + ".");
    }
  });

  injectScript = function(tabId, file) {
    tabId = tabId;
    file = file;
    return chrome.tabs.executeScript(tabId, {
      file: "build/utils.js"
    }, function() {
      return chrome.tabs.executeScript(tabId, {
        file: "build/archive.js"
      }, function() {
        var songsHistory;
        songsHistory = localStorage.getItem('songsHistory');
        return chrome.tabs.executeScript(tabId, {
          code: "chrome.archive.start(" + songsHistory + ")"
        }, function() {
          chrome.tabs.executeScript(tabId, {
            file: "build/" + file + ".js"
          });
          return chrome.tabs.executeScript(tabId, {
            code: "var isLoaded = true;"
          });
        });
      });
    });
  };

  chrome.runtime.onMessage.addListener(function(message, sender, sendResponse) {
    var error;
    if (message.method === 'postSong') {
      rapi.postSong(message.data);
    }
    if (message.method === 'inject' && message.loaded === false) {
      injectScript(message.tabId, message.file);
    }
    if (message.method === 'pushToSongsHistory') {
      pushToSongsHistory(message.search);
    }
    try {
      return sendResponse({});
    } catch (_error) {
      error = _error;
    }
  });

  chrome.runtime.getBackgroundPage(function(background) {
    return background.updateAccessToken = function(token) {
      var access_token;
      return access_token = localStorage.access_token;
    };
  });

  chrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {
    var file;
    if (tab.url.match(/\.facebook\./)) {
      file = "facebook";
    }
    file || (file = "tooltips");
    if (file != null) {
      return chrome.tabs.executeScript(tabId, {
        code: "if(isLoaded){isLoaded=isLoaded}else{ var isLoaded=false;}        chrome.runtime.sendMessage({        loaded: isLoaded || false,        method: 'inject',        tabId: " + tabId + ",        file: '" + file + "' });"
      });
    }
  });

  rapi = {
    postSong: function(data) {
      return chrome.utils.req("" + host + "/api/song", function() {}, "POST", {
        access_token: localStorage.access_token,
        post: {
          search: unescape(data.search)
        }
      });
    }
  };

  pushToSongsHistory = function(string) {
    var history;
    history = JSON.parse(localStorage.getItem('songsHistory'));
    if (history != null) {
      history.elements.push(string);
      return localStorage.setItem("songsHistory", JSON.stringify(history));
    }
  };

  start();

}).call(this);
