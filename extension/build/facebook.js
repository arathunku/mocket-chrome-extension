// Generated by CoffeeScript 1.6.3
(function() {
  var facebook;

  facebook = {
    after_click: ' · Mocketed!',
    before_click: ' · Mocket it!',
    observe: function() {
      var _this = this;
      if (!this.observer) {
        return chrome.utils.observeDOM(document.body, [], function(obs) {
          _this.observer = obs;
          return _this.refresh();
        });
      }
    },
    start: function() {
      chrome.utils.d.log('FB START');
      this.refresh();
      return this.observe();
    },
    refresh: function() {
      var element, node, nodes, _i, _len, _results;
      chrome.utils.d.log('Facebook refresh');
      nodes = document.querySelectorAll('*[data-timestamp]');
      if (!nodes.length) {
        nodes = document.querySelectorAll('.mainWrapper');
      }
      _results = [];
      for (_i = 0, _len = nodes.length; _i < _len; _i++) {
        node = nodes[_i];
        if (!this.alreadyAdded(node)) {
          element = this.getSpotify(node) || this.getYoutube(node);
          if (element) {
            if (chrome.archive.search(element)) {
              _results.push(this.createMocketNode(node, '', this.after_click));
            } else {
              if (!this.alreadyAdded(node)) {
                _results.push(this.appendAdder(node, element));
              } else {
                _results.push(void 0);
              }
            }
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    createMocketNode: function(node, element, text) {
      var action;
      action = node.querySelector('.livetimestamp').parentNode.parentNode;
      if (action) {
        return action.insertAdjacentHTML('beforeend', '<a class="mocketLink" style="color: #6D84B4;"\
          data-searchstring="' + escape(element) + '">' + text + '</a>');
      }
    },
    appendAdder: function(node, element) {
      this.createMocketNode(node, element, this.before_click);
      return this.bindAdder(node.querySelector('.mocketLink'));
    },
    bindAdder: function(node) {
      var _this = this;
      return chrome.utils.on('click', node, function(evt) {
        var e, search;
        evt.preventDefault();
        e = evt.toElement;
        if (e.innerText === _this.after_click) {
          return;
        }
        search = e.getAttribute('data-searchstring');
        e.innerText = _this.after_click;
        chrome.archive.push(search);
        return chrome.runtime.sendMessage({
          method: "postSong",
          data: {
            search: search
          }
        });
      });
    },
    alreadyAdded: function(obj) {
      return obj.innerHTML.match(/Mocket\b/ig) || obj.innerHTML.match(/Mocketed/ig);
    },
    inHistory: function(string, callback) {
      return chrome.runtime.sendMessage({
        method: "searchHistory",
        data: string
      }, callback);
    },
    getSpotify: function(obj) {
      var v;
      if (obj instanceof Node) {
        v = obj.getElementsByClassName('featured_song')[0];
        if (v) {
          return v.innerText;
        }
      }
      return null;
    },
    getYoutube: function(obj) {
      var e, match, regexp, string;
      regexp = /youtube\.\S*/ig;
      string = '';
      if (obj instanceof Node) {
        string = obj.innerText;
      }
      match = string.match(regexp);
      if (match && match.length > 0) {
        e = obj.querySelector('.fwb') || obj.querySelector('.uiAttachmentTitle');
        if (e) {
          return e.innerText;
        }
      }
      return null;
    }
  };

  chrome.utils.d.log('Facebook');

  facebook.start();

}).call(this);
