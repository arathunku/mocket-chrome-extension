// Generated by CoffeeScript 1.6.3
(function() {
  var facebook;

  facebook = {
    classes: ['uiUnifiedStory', 'uiStreamStory'],
    observe: function() {
      var _this = this;
      if (!this.observer) {
        return chrome.utils.observeDOM(document.body, this.classes, function(obs) {
          return _this.refresh();
        });
      }
    },
    start: function() {
      chrome.utils.d.log('FB START');
      this.refresh();
      return this.observe();
    },
    refresh: function() {
      var element, end, i, node, nodes, start, _i, _results,
        _this = this;
      chrome.utils.d.log('Facebook refresh');
      nodes = document.getElementsByClassName('mainWrapper');
      start = 0;
      end = nodes.length - 1;
      _results = [];
      for (i = _i = start; start <= end ? _i <= end : _i >= end; i = start <= end ? ++_i : --_i) {
        node = nodes[i];
        if (!this.alreadyAdded(node)) {
          element = this.getSpotify(node) || this.getYoutube(node);
          if (element) {
            console.log("papeaisdpoa");
            _results.push(this.inHistory(element, function(exists) {
              if (exists) {
                console.log("createMocketNode");
                return _this.createMocketNode(node, '', "Mocketed!");
              } else {
                console.log("appendNode");
                return _this.appendAdder(node, element);
              }
            }));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    createMocketNode: function(node, element, text) {
      var action;
      action = node.getElementsByClassName('UIActionLinks')[0];
      return action.insertAdjacentHTML('beforeend', '<a class="mocketLink" data-searchstring="' + escape(element) + '">' + text + '</a> Â·');
    },
    appendAdder: function(node, element) {
      this.createMocketNode(node, element, 'Mocket it!');
      return this.bindAdder(node.getElementsByClassName('mocketLink')[0]);
    },
    bindAdder: function(node) {
      return chrome.utils.on('click', node, function(evt) {
        var after_click, e, search;
        evt.preventDefault();
        after_click = 'Mocketed!';
        e = evt.toElement;
        if (e.innerText === after_click) {
          return;
        }
        search = e.getAttribute('data-searchstring');
        e.innerText = after_click;
        return chrome.runtime.sendMessage({
          method: "postSong",
          data: {
            search: search
          }
        });
      });
    },
    alreadyAdded: function(obj) {
      debugger;
      return obj.innerHTML.match(/Mocket it/ig) || obj.innerHTML.match(/Mocketed/ig);
    },
    inHistory: function(string, callback) {
      return chrome.runtime.sendMessage({
        method: "searchHistory",
        data: string
      }, callback);
    },
    getSpotify: function(obj) {
      var v;
      if (obj instanceof Node) {
        v = obj.getElementsByClassName('featured_song')[0];
        if (v) {
          return v.innerText;
        }
      }
      return null;
    },
    getYoutube: function(obj) {
      var e, match, regexp, string;
      regexp = /youtube\.\S*/ig;
      string = '';
      if (obj instanceof Node) {
        string = obj.innerText;
      }
      match = string.match(regexp);
      if (match && match.length > 0) {
        e = obj.getElementsByClassName('uiAttachmentTitle')[0];
        if (e) {
          return e.innerText;
        }
      }
      return null;
    }
  };

  chrome.utils.d.log('Facebook');

  facebook.start();

}).call(this);
